# -*- coding: utf-8 -*-
"""Rest API.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1efWKQaBalEftplJ_NrGzlZGx2QU9Of-P
"""



from flask import Flask
from flask_restful import Resource, Api, reqparse
import ast
app = Flask(__name__)
#api = Api(app)
import requests
import json
from flask import jsonify, make_response,request
import numpy as np
import tensorflow as tf
import pickle
from flask_cors import CORS
CORS(app)

def preprocess(con,que,token):
  coni=token.texts_to_sequences([con])
  quei=token.texts_to_sequences([que])
  con_pad=tf.keras.preprocessing.sequence.pad_sequences(coni,padding='post',truncating='post',maxlen=306)
  que_pad=tf.keras.preprocessing.sequence.pad_sequences(quei,padding='post',truncating='post',maxlen=40)
  return con_pad,que_pad

def fn(con,que):
  with open('tokenizer.pickle', 'rb') as handle:
    tokenizer = pickle.load(handle)
  c,q=preprocess(con,que,tokenizer)
  c=c.reshape((306))
  q=q.reshape((40))
  URL ='http://localhost:8501/v1/models/qna:predict'
  headers = {"content-type": "application/json"}
  data = json.dumps({"signature_name": "serving_default", "instances": [{'input_1':q.tolist(),'input_2':c.tolist()}]})
  r=requests.post(URL, data=data, headers=headers)
  pred=r.json()
  ans=pred['predictions'][0]
  st=np.argmax(np.array(ans['tf.compat.v1.nn.softmax_1']))
  en=np.argmax(np.array(ans['tf.compat.v1.nn.softmax_2']))
  con=c.tolist()[st:en+1]
  str=''
  for i in con:
    str=str+tokenizer.index_word[i]+' '
  print(pred)
  return str
  #return make_response(jsonify(r), 201)

@app.route("/qna", methods=["POST"])
#@cross_origin()
def qna():
  """POST in server"""
  req=request.get_json()
  print(req)
  con=req['txt1']
  que=req['txt2']
  out=fn(con,que)
  response=make_response(jsonify({'message':out}), 200)
  return response

if __name__ == "__main__":
  app.run()